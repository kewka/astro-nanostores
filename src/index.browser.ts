import { onMount, type ReadableAtom } from "nanostores";

const atoms: Set<ReadableAtom<any>> = new Set();

function getStore() {
  const store = (window as any).__ASTRO_NANOSTORES__;
  if (store instanceof Map) {
    return store;
  }

  console.warn(
    "[@kewka/astro-nanostores] Missing window.__ASTRO_NANOSTORES__. Ensure you include the script generated by 'getNanostoresScript()'."
  );

  return new Map();
}

export const shared = <A extends ReadableAtom<any>>(
  name: string,
  atom: A
): A => {
  const baseValue = atom.value;

  Object.defineProperty(atom, "value", {
    configurable: false,
    enumerable: true,
    get() {
      const store = getStore();
      if (!store.has(name)) {
        store.set(name, structuredClone(baseValue));
      }
      return store.get(name);
    },
    set(value) {
      const store = getStore();
      store.set(name, value);
    },
  });

  onMount(atom, () => {
    atoms.add(atom);
    return () => {
      atoms.delete(atom);
    };
  });

  return atom;
};

document.addEventListener("astro:page-load", () => {
  atoms.forEach((atom) => {
    atom.notify();
  });
});
